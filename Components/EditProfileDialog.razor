@using System.Text
@using NapelemEditor.Models
@inject NavigationManager UriHelper;
@inject IDialogService DialogService
@inject IUser UserController;
@inject ISnackbar Snackbar;
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<MudDialog>
    <DialogContent>
        <div class="d-flex flex-column py-1">
            <MudForm @bind-IsValid="@_success" @ref="form">
                <MudTextField @bind-Value="Username" Required="true" Immediate="true" Label="Username" Variant="Variant.Outlined" MaxLength="45" HelperText="Enter your new username" OnlyValidateIfDirty/>
                <MudTextField @bind-Value="OrigPassword" Required="true" Immediate="true" Label="Current Password" Variant="Variant.Outlined" InputType="InputType.Password" MaxLength="45" HelperText="Enter your current password"/>
                <MudTextField @bind-Value="Password" Required="true" Immediate="true" Label="Password" Variant="Variant.Outlined" MaxLength="45" @ref="pwField1" InputType="InputType.Password" HelperText="Enter your new password"/>
                <MudTextField @bind-Value="PasswordAgain" Required="true" Immediate="true" Label="Password Again" Variant="Variant.Outlined" InputType="InputType.Password" MaxLength="45" Validation="@(new Func<string, string>(PasswordMatch))" HelperText="Repeat your new password"/>
            </MudForm>
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(() => MudDialog.Close())">Cancel</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="Change" Disabled="@(!_success)">Save Changes</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    private bool _success;
    private string OrigUsername { get; set; } // original username
    private string Username { get; set; }
    private string OrigPassword { get; set; } // original password
    private string Password { get; set; }
    private string PasswordAgain { get; set; }

    MudTextField<string> pwField1;
    MudForm form;


    protected override async void OnInitialized()
    {
        if (await SessionStorage.ContainKeyAsync("isAuthenticated"))
        {
            OrigUsername = await SessionStorage.GetItemAsync<string>("UserName");
        }
        OrigUsername = await LocalStorage.GetItemAsync<string>("UserName");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (await SessionStorage.ContainKeyAsync("isAuthenticated"))
            {
                var tempUname = await SessionStorage.GetItemAsync<string>("UserName");
                if (tempUname != OrigUsername)
                {
                    OrigUsername = tempUname;
                    StateHasChanged();
                }
            }
            if (await LocalStorage.ContainKeyAsync("isAuthenticated"))
            {
                var tempUname = await LocalStorage.GetItemAsync<string>("UserName");
                if (tempUname != Username)
                {
                    OrigUsername = tempUname;
                    StateHasChanged();
                }
            }
            Username = OrigUsername;
            StateHasChanged();
        }
    }

    public async void Change()
    {
        Users? user;
        try
        {
            user = await UserController.GetUser(OrigUsername);
        }
        catch
        {
            Snackbar.Add("Invalid username or password", Severity.Error);
            return;
        }
        if (user is null)
        {
            Snackbar.Add("Invalid username or password", Severity.Error);
            return;
        }
        var saltedPass = GenerateSHA256Hash(OrigPassword, user.Salt);

        if (!string.Equals(user.Password, saltedPass, StringComparison.CurrentCultureIgnoreCase))
        {
            Snackbar.Add("Invalid password");
            return;
        }


        if (Password != PasswordAgain)
        {
            Snackbar.Add("Passwords do not match", Severity.Error);
            return;
        }
        if (Username.Length < 4)
        {
            Snackbar.Add("Username must be at least 4 characters", Severity.Error);
            return;
        }
        try
        {
            var checkUser = await UserController.GetUser(Username);
            if (checkUser != null && checkUser.UserName != OrigUsername)
            {
                Snackbar.Add("Username already exists", Severity.Error);
                return;
            }
        }
        catch (Exception e)
        {
    //ignored
        }

        try
        {
            DialogParameters parameters = new() { { "Content", "Are you sure you want to change your profile credentials? You will be logged out!" } };
            var result = await DialogService.ShowAsync<ConfirmDialog>("Warning!", parameters);
            var dialogResult = await result.Result;
            if (dialogResult.Canceled) return;

            var salt = CreateSalt();
            Password = GenerateSHA256Hash(Password, salt);
            var updatedUser = new Users
            {
                id = user.id,
                UserName = Username,
                Password = Password,
                Salt = salt
            };
            await UserController.UpdateUser(updatedUser);
            await SessionStorage.SetItemAsync("UserName", updatedUser.UserName);
            var saved = await SessionStorage.GetItemAsStringAsync("UserName");
        }
        catch (Exception e)
        {
    //ignored
        }
        MudDialog.Close(DialogResult.Ok(true));
    }

    private string? PasswordMatch(string arg)
    {
        return pwField1.Value != arg ? "Passwords don't match" : null;
    }

    private static string CreateSalt(int size = 30)
    {
        var rng = new System.Security.Cryptography.RNGCryptoServiceProvider();
        var buff = new byte[size];
        rng.GetBytes(buff);
        return Convert.ToBase64String(buff);
    }

    private string ByteArrayToHexString(byte[] ba)
    {
        var hex = new StringBuilder(ba.Length * 2);
        foreach (var b in ba)
            hex.Append($"{b:x2}");
        return hex.ToString();
    }

    private string GenerateSHA256Hash(string input, string salt) //currently typed password, salt saved within user
    {
        var bytes = Encoding.UTF8.GetBytes(input + salt);
        System.Security.Cryptography.SHA256Managed sha256hashstring =
            new System.Security.Cryptography.SHA256Managed();
        var hash = sha256hashstring.ComputeHash(bytes);

        return ByteArrayToHexString(hash);
    }

}