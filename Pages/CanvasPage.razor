@inject MouseService mouseSrv;
@inject IDialogService DialogService;
@using MudBlazor.Extensions

@page "/canvas"
<PageTitle>Canvas</PageTitle>

<MudDynamicTabs @ref="DynamicTabs" @bind-ActivePanelIndex="_index" Border="true" Outlined="true" AddTab="AddTab" PanelClass="px-4 py-6">
    <ChildContent>
        @foreach (var item in _tabs)
        {
            <MudTabPanel Text="@item.Name" Tag="@item.Id">

                <MudButton OnClick="@(() => AddObstacle(_index))" hidden="@item.CanvasLocked">Add Obstacle</MudButton>
                <MudButton OnClick="LockCanvas" Color="Color.Warning" hidden="@item.CanvasLocked">Lock Canvas</MudButton>
                <div class="row mt-2">
                    <div class="col">
                        <svg class="bg-light" width="@item.Width" height="@item.Height" xmlns="http://www.w3.org/2000/svg"
                             @onmousemove=@(e => mouseSrv.FireMove(this, e))
                    @onmouseup=@(e => mouseSrv.FireUp(this, e))
                    @ondblclick=@(e => DeleteObstacle(this, e, _index))>
                            @foreach (var obstacle in item.Obstacles)
                            {
                                <Draggable @bind-X="obstacle.X" @bind-Y="obstacle.Y" isLocked="obstacle.isLocked">
                                    <Obstacle height="obstacle.Height" width="obstacle.Width"/>
                                </Draggable>
                            }
                        </svg>
                    </div>
                </div>


            </MudTabPanel>
        }
    </ChildContent>

</MudDynamicTabs>


@code {

    private class TabView
    {
        public string Name { get; set; }
        public List<Objects> Obstacles = new();
        public Guid Id { get; set; }
        public bool CanvasLocked { get; set; }
        public string Width { get; set; } = "1200";
        public string Height { get; set; } = "500";
    }


    [Parameter]
    public RenderFragment RenderFragment { get; set; }

    private MudDynamicTabs DynamicTabs;
    private int _index = 0;
    static double X = 290;
    static double Y = 250;
    int width = 40;
    int height = 40;
    static int c = 0;
    List<Objects> Obstacles = new();
    private List<TabView> _tabs = new();

    protected override void OnInitialized()
    {
        _tabs.Add(new TabView { Name = "", Id = Guid.NewGuid() });
    }

    private void AddTab()
    {
        _tabs.Add(new TabView { Name = "", Id = Guid.NewGuid() });
    }
    
    private async void AddObstacle(int index)
    {
        var parameters = new DialogParameters
        {
            { "_content", "Add Obstacle" },
            { "height", 100 },
            { "width", 100 }
        };
        try
        {
            var result = DialogService.Show<ObstacleDialog>("Add Obstacle", parameters);
            var dialogResult = await result.Result;
            width = dialogResult.Data.As<Tuple<int, int>>().Item1;
            height = dialogResult.Data.As<Tuple<int, int>>().Item2;
            _tabs[_index].Obstacles.Add(new Objects(X, Y, width, height));
        }
        catch (Exception e)
        {
    //ignored
        }

        StateHasChanged();
    }

    private void DeleteObstacle(object? obj, MouseEventArgs e, int index )
    {
        foreach (var o in _tabs[index].Obstacles.Where(o => o.X + o.Width / 2 < e.OffsetX + o.Width / 2
                                               && o.X + o.Width / 2 > e.OffsetX - o.Width / 2
                                               && o.Y + o.Height / 2 < e.OffsetY + o.Height / 2
                                               && o.Y + o.Height / 2 > e.OffsetY - o.Height / 2))
        {
            _tabs[index].Obstacles.Remove(o);
            StateHasChanged();
    // Console.WriteLine(o.X + " X position within : " + (o.Width - e.OffsetX) + " and " +( o.Width + e.OffsetX));
    // Console.WriteLine(o.Y + " Y position within : " + (o.Height - e.OffsetY) + " and " +(o.Height + e.OffsetY));
            return;
        }
    }

    private void LockCanvas()
    {
        // foreach (var obstacle in Obstacles)
        // {
        //     obstacle.isLocked = true;
        // }
        // canvasLocked = true;
    }

}