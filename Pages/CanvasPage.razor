@inject MouseService mouseSrv;
@page "/canvas"
@using System.Runtime.Intrinsics.Arm


<div class="row g-3 align-items-center">
    <div class="col-auto">
        <label class="col-form-label">Solar system position:</label>
    </div>
    <div class="col-auto">
        <input type="number" class="form-control" @bind=X />
    </div>
    <div class="col-auto">
        <input type="number" @bind=Y class="form-control" />
    </div>
</div>
 <div class="row mt-2">
     <div class="col">

<svg class="bg-light" width="@canvasWidth" height="@canvasHeigth" xmlns="http://www.w3.org/2000/svg"
     @onmousemove=@(e => mouseSrv.FireMove(this, e))
             @onmouseup=@(e => mouseSrv.FireUp(this, e))>
    
    <Draggable X="X" Y="Y" >
        <Sun></Sun>
    </Draggable>
    @* @foreach (var draggabble in Draggables) *@
    @* { *@
    @*     @RenderFragment(draggabble) *@
    @* } *@
</svg>
    </div>
</div>

@code {
    [Parameter]
    public RenderFragment<Draggable> RenderFragment { get; set; }
    
    double X = 290;
    double Y = 250;
    private string canvasWidth { get; set; } = "1200";
    public string canvasHeigth { get; set; } = "500";
    List<Draggable> Draggables = new();

    protected override void OnInitialized()
    {
        var asd = new Draggable() { X = X, Y = Y };
        Draggables.Add(asd);
        foreach (var x in Draggables)
        {
            Console.WriteLine(x);
        }
         base.OnInitialized();
    }
    

  

    // public void AddButton()
    // {
    //     ChildContent.
    // }
    //
    // private RenderFragment CreateComponent() => BuildRenderTree =>
    // {
    //     ChildContent = ChildContent.
    // }
    
}