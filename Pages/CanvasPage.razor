@inject IDialogService DialogService;
@inject INapelem NapelemController
@using MudBlazor.Extensions
@using NapelemEditor.Models
@inject ISnackbar Snackbar
@inject MouseService MouseSrv;

@page "/canvas"
<PageTitle>Canvas</PageTitle>

<MudDynamicTabs @ref="DynamicTabs" @bind-ActivePanelIndex="_index" Border="true" Outlined="true" AddTab="AddTabCallback" PanelClass="px-4 py-6" CloseTab="CloseTabCallback" AddIconToolTip="Click to add a new tab" CloseIconToolTip="Close tab">
    <ChildContent>
        <MudGrid>
            <MudItem>
                @foreach (var tab in _tabs)
                {
                    <MudTabPanel Text="@tab.Name" Tag="@tab.Id">
                        <MudButton OnClick="@(AddObstacle)" hidden="@tab.CanvasLocked" Variant="Variant.Outlined">Add Obstacle</MudButton>
                        <MudButton OnClick="@(LockCanvas)" Color="Color.Warning" hidden="@tab.CanvasLocked" Variant="Variant.Outlined">Lock Canvas</MudButton>
                        <div class="row mt-2">
                            <div class="col">
                                <svg class="bg-light" width="@tab.Width" height="@tab.Height" xmlns="http://www.w3.org/2000/svg"
                                     @onmousemove=@(e => OnMove(this, e))
                                                    @onmouseup=@(e => OnLeave(this, e))
                                                    @ondblclick=@(e => DeleteObject(this, e))>
                                    @foreach (var obstacle in tab.Obstacles)
                                    {
                                        <Draggable @bind-X="obstacle.X" Height="obstacle.Height" Width="obstacle.Width" @bind-Y="obstacle.Y" IsLocked="obstacle.isLocked">
                                            <Obstacle Width="@obstacle.Width" Height="@obstacle.Height"/>
                                        </Draggable>
                                    }
                                    @foreach (var panel in tab.Panels)
                                    {
                                        <Draggable @bind-X="panel.X" Height="panel.Height" Width="panel.Width" @bind-Y="panel.Y" IsLocked="panel.isLocked">
                                            <Obstacle Width="@panel.Width" Height="@panel.Height" color="blue"/>
                                        </Draggable>
                                    }
                                </svg>
                            </div>
                        </div>
                    </MudTabPanel>
                }
            </MudItem>
            <MudItem>
                <MudButtonGroup VerticalAlign="true">
                    @foreach (var solarPanel in _solarPanels.Where(solarPanel => _tabs.Count > 0))
                    {
                        <MudButton OnClick="@(() => AddPanel(solarPanel.Width, solarPanel.Height, solarPanel.Price, solarPanel.Output))">
                            <MudIcon Icon="@Icons.Material.Filled.SolarPower"/>
                            @(solarPanel.Name + " - " + solarPanel.Width + "x" + solarPanel.Height)
                        </MudButton>
                    }
                </MudButtonGroup>
            </MudItem>
            <MudItem>
                <MudSimpleTable Style="overflow-x: auto;">
                    <thead>
                    <tr>
                        <th>Total Output</th>
                        <th>Total Price</th>
                    </tr>
                    </thead>
                    <tbody>
                    <tr>
                        <td>@_totalOutput W</td>
                        <td>@_totalPrice €</td>
                    </tr>
                    </tbody>
                </MudSimpleTable>
            </MudItem>
        </MudGrid>
    </ChildContent>
</MudDynamicTabs>


@code
{
    
    ElementReference canvasRef;
    private MudDynamicTabs DynamicTabs;
    private int _index;
    private readonly List<TabView> _tabs = new();
    private List<Napelem> _solarPanels = new();
    int _totalOutput;
    int _totalPrice;
    
    protected override async Task OnInitializedAsync()
    {
        _solarPanels = await NapelemController.GetAllNapelem();
        AddTabCallback();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (_tabs.Count <= 0) return;
        _totalPrice = 0;
        _totalOutput = 0;
        foreach (var p in _tabs[_index].Panels)
        {
            _totalOutput += p.Output;
            _totalPrice += p.Price;
        }
        //TODO use Orientation of the wall to calculate output
        
    }

    private async void AddTab(Guid id)
    {
        try
        {
            var result = await DialogService.ShowAsync<TabDialog>("Add Tab");
            var res = await result.Result;
            if (res.Canceled) return;
            var tab = res.Data.As<TabView>();
            _tabs.Add(new TabView { Name = tab.Name, Orientation = tab.Orientation, Width = tab.Width, Height = tab.Height, Id = Guid.NewGuid() });
        }
        catch (Exception e)
        {
    //ignored
        }

        StateHasChanged();
    }

    private async void RemoveTab(Guid id)
    {
        var tabView = _tabs.SingleOrDefault((t) => Equals(t.Id, id));
        if (tabView.Obstacles.Count > 0 || tabView.Panels.Count > 0)
        {
            DialogParameters parameters = new() { { "Content", "Wall is not empty! Are you sure you want to do that?" } };
            var result = await DialogService.ShowAsync<ConfirmDialog>("Warning!", parameters);
            var res = await result.Result;
            if (res.Canceled) return;
        }
        _tabs.Remove(tabView);
        StateHasChanged();
    }

    void AddTabCallback() => AddTab(Guid.NewGuid());
    void CloseTabCallback(MudTabPanel panel) => RemoveTab((Guid)panel.Tag);


    private async void AddObstacle()
    {
        var parameters = new DialogParameters
        {
            { "Content", "Add Obstacle" }
        };
        try
        {
            var result = await DialogService.ShowAsync<ObstacleDialog>("Add Obstacle", parameters);
            var dialogResult = await result.Result;
            var width = dialogResult.Data.As<Tuple<int, int>>().Item1;
            var height = dialogResult.Data.As<Tuple<int, int>>().Item2;
            _tabs[_index].Obstacles.Add(new Objects(150, 150, width, height));
        }
        catch (Exception e)
        {
    //ignored   
        }
        StateHasChanged();
    }

    private void AddPanel(int width, int height, int price, int output)
    {
        if (!_tabs[_index].CanvasLocked)
        {
            Snackbar.Add("Wall customization still in progress!", Severity.Error);
            return;
        }
        _tabs[_index].Panels.Add(new Objects(150, 150, width, height, price, output));
    }

    private void LockCanvas()
    {
        foreach (var obstacle in _tabs[_index].Obstacles)
        {
            obstacle.isLocked = true;
        }
        _tabs[_index].CanvasLocked = true;
        StateHasChanged();
    }

    private void DeleteObject(object? obj, MouseEventArgs e)
    {
        foreach (var o in _tabs[_index].Obstacles.Where(o => !o.isLocked).Where(o => o.X + o.Width / 2 < e.OffsetX + o.Width / 2 && o.X + o.Width / 2 > e.OffsetX - o.Width / 2 && o.Y + o.Height / 2 < e.OffsetY + o.Height / 2 && o.Y + o.Height / 2 > e.OffsetY - o.Height / 2))
        {
            _tabs[_index].Obstacles.Remove(o);
            return;
        }

        foreach (var p in _tabs[_index].Panels.Where(p => p.X + p.Width / 2 < e.OffsetX + p.Width / 2 && p.X + p.Width / 2 > e.OffsetX - p.Width / 2 && p.Y + p.Height / 2 < e.OffsetY + p.Height / 2 && p.Y + p.Height / 2 > e.OffsetY - p.Height / 2))
        {
            _tabs[_index].Panels.Remove(p);
            return;
        }
    }

    private void OnMove(object? obj, MouseEventArgs e)
    {
        StateHasChanged();
        MouseSrv.FireMove(obj, e);
        StateHasChanged();
    }

    private void OnLeave(object? obj, MouseEventArgs e)
    {
        if (_tabs[_index].Obstacles.Any(o => _tabs[_index].Obstacles.Any(o2 => o.X < o2.X + o2.Width && o.X + o.Width > o2.X && o.Y < o2.Y + o2.Height && o.Y + o.Height > o2.Y && o != o2)))
        {
            Console.WriteLine("collision o with o");
            MouseSrv.Reset(obj, e);
            return;
        }


        if (_tabs[_index].Panels.Any(p => _tabs[_index].Panels.Any(p2 => p.X < p2.X + p2.Width && p.X + p.Width > p2.X && p.Y < p2.Y + p2.Height && p.Y + p.Height > p2.Y && p != p2)))
        {
            Console.WriteLine("collision with panel");
            MouseSrv.Reset(obj, e);
            return;
        }


        if (_tabs[_index].Panels.Any(p => _tabs[_index].Obstacles.Any(o2 => p.X < o2.X + o2.Width && p.X + p.Width > o2.X && p.Y < o2.Y + o2.Height && p.Y + p.Height > o2.Y)))
        {
            Console.WriteLine("collision with obstacle");
            MouseSrv.Reset(obj, e);
            return;
        }


        if (_tabs[_index].Obstacles.Any(o => o.X < 0 || o.X + o.Width + 10 > int.Parse(_tabs[_index].Width) || o.Y < 0 || o.Y + o.Height + 10 > int.Parse(_tabs[_index].Height)))
        {
            Console.WriteLine("collision with wall");
            MouseSrv.Reset(obj, e);
            return;
        }

        if (_tabs[_index].Panels.Any(o => o.X < 0 || o.X + o.Width + 10 > int.Parse(_tabs[_index].Width) || o.Y < 0 || o.Y + o.Height + 10 > int.Parse(_tabs[_index].Height)))
        {
            Console.WriteLine("collision with wall");
            MouseSrv.Reset(obj, e);
            return;
        }

        Console.WriteLine("no collision");
        MouseSrv.FireLeave(obj, e);
    }
}