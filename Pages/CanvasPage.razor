@inject MouseService mouseSrv;
@inject IDialogService DialogService;
@using MudBlazor.Extensions

@page "/canvas"
<PageTitle>Canvas</PageTitle>

<MudDynamicTabs @ref="DynamicTabs" @bind-ActivePanelIndex="_index" Border="true" Outlined="true" AddTab="AddTab">
    @foreach (var item in _tabs)
    {
        <MudTabPanel Text="@item.Name" Tag="@item.Id">

            <MudButton OnClick="@AddObstacle" hidden="@canvasLocked">Add Obstacle</MudButton>
            <MudButton OnClick="LockCanvas" Color="Color.Warning" hidden="@canvasLocked">Lock Canvas</MudButton>
            <div class="row mt-2">
                <div class="col">
                    <svg class="bg-light" width="@canvasWidth" height="@canvasHeigth" xmlns="http://www.w3.org/2000/svg"
                         @onmousemove=@(e => mouseSrv.FireMove(this, e))
             @onmouseup=@(e => mouseSrv.FireUp(this, e))
             @ondblclick=@(e => DeleteObstacle(this, e))>
                        @foreach (var item in Obstacles)
                        {
                            <Draggable @bind-X="item.X" @bind-Y="item.Y" isLocked="item.isLocked">
                                <Obstacle height="item.Height" width="item.Width"/>
                            </Draggable>
                        }
                    </svg>
                </div>
            </div>

        </MudTabPanel>
    }
</MudDynamicTabs>


@code {

    private class TabView
    {
        public string Name { get; set; }
        public string Content { get; set; }
        public Guid Id { get; set; }
    }


    [Parameter]
    public RenderFragment RenderFragment { get; set; }

    private MudDynamicTabs DynamicTabs;
    private int _index = 0;
    static double X = 290;
    static double Y = 250;
    int width = 40;
    int height = 40;
    static int c = 0;
    private string canvasWidth { get; set; } = "1200";
    private string canvasHeigth { get; set; } = "500";
    List<Objects> Obstacles = new();
    private List<TabView> _tabs = new();
    private bool canvasLocked = false;

    protected override void OnInitialized()
    {
        _tabs.Add(new TabView { Name = "Tab A", Id = Guid.NewGuid() });
        _tabs.Add(new TabView { Name = "Tab B", Id = Guid.NewGuid() });
        _tabs.Add(new TabView { Name = "Tab C", Id = Guid.NewGuid() });
    }

    private void AddTab()
    {
    }

    private async void AddObstacle()
    {
        var parameters = new DialogParameters
        {
            { "_content", "Add Obstacle" },
            { "height", 100 },
            { "width", 100 }
        };
        try
        {
            var result = DialogService.Show<ObstacleDialog>("Add Obstacle", parameters);
            var dialogResult = await result.Result;
            width = dialogResult.Data.As<Tuple<int, int>>().Item1;
            height = dialogResult.Data.As<Tuple<int, int>>().Item2;
            Obstacles.Add(new Objects(X, Y, width, height));
        }
        catch (Exception e)
        {
    //ignored
        }

        StateHasChanged();
    }

    private void DeleteObstacle(object? obj, MouseEventArgs e)
    {
        foreach (var o in Obstacles.Where(o => o.X + o.Width / 2 < e.OffsetX + o.Width / 2
                                               && o.X + o.Width / 2 > e.OffsetX - o.Width / 2
                                               && o.Y + o.Height / 2 < e.OffsetY + o.Height / 2
                                               && o.Y + o.Height / 2 > e.OffsetY - o.Height / 2))
        {
            Obstacles.Remove(o);
            StateHasChanged();
    // Console.WriteLine(o.X + " X position within : " + (o.Width - e.OffsetX) + " and " +( o.Width + e.OffsetX));
    // Console.WriteLine(o.Y + " Y position within : " + (o.Height - e.OffsetY) + " and " +(o.Height + e.OffsetY));
            return;
        }
    }

    private void LockCanvas()
    {
        foreach (var obstacle in Obstacles)
        {
            obstacle.isLocked = true;
        }
        canvasLocked = true;
    }

}