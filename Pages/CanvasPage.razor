@inject MouseService MouseSrv;
@inject IDialogService DialogService;
@inject INapelem NapelemController
@using MudBlazor.Extensions
@using NapelemEditor.Models
@inject ISnackbar Snackbar

@page "/canvas"
<PageTitle>Canvas</PageTitle>

<MudDynamicTabs @ref="DynamicTabs" @bind-ActivePanelIndex="_index" Border="true" Outlined="true" AddTab="AddTabCallback" PanelClass="px-4 py-6" CloseTab="CloseTabCallback" AddIconToolTip="Click to add a new tab" CloseIconToolTip="Close tab">
    <ChildContent>
        <MudGrid>
            <MudItem>
                @foreach (var item in _tabs)
                {
                    <MudTabPanel Text="@item.Name" Tag="@item.Id">
                        <MudButton OnClick="@(AddObstacle)" hidden="@item.CanvasLocked" Variant="Variant.Outlined">Add Obstacle</MudButton>
                        <MudButton OnClick="@(LockCanvas)" Color="Color.Warning" hidden="@item.CanvasLocked" Variant="Variant.Outlined">Lock Canvas</MudButton>
                        <div class="row mt-2">
                            <div class="col">
                                <svg class="bg-light" width="@item.Width" height="@item.Height" xmlns="http://www.w3.org/2000/svg"
                                     @onmousemove=@(e => MouseSrv.FireMove(this, e))
                                    @onmouseup=@(e => MouseSrv.FireUp(this, e))
                                    @ondblclick=@(e => DeleteObject(this, e))>
                                    @foreach (var obstacle in item.Obstacles)
                                    {
                                        <Draggable @bind-X="obstacle.X" @bind-Y="obstacle.Y" IsLocked="obstacle.isLocked" Height="obstacle.Height" Width="obstacle.Width">
                                            <Obstacle height="obstacle.Height" width="obstacle.Width"/>
                                        </Draggable>
                                    }
                                    @foreach (var panel in item.Panels)
                                    {
                                        <Draggable @bind-X="panel.X" @bind-Y="panel.Y" IsLocked="panel.isLocked">
                                            <Obstacle height="panel.Height" width="panel.Width" color="#00BFFF"/>
                                        </Draggable>
                                    }
                                </svg>
                            </div>
                        </div>
                    </MudTabPanel>
                }
            </MudItem>
            <MudItem>
                <MudButtonGroup VerticalAlign="true">
                    @foreach (var solarPanel in _solarPanels.Where(solarPanel => _tabs.Count > 0))
                    {
                        <MudButton OnClick="@(() => AddPanel(solarPanel.Width, solarPanel.Height))">
                            <MudIcon Icon="@Icons.Material.Filled.SolarPower"/>
                            @(solarPanel.Name + " - " + solarPanel.Width + "x" + solarPanel.Height)
                        </MudButton>
                    }
                </MudButtonGroup>
            </MudItem>
        </MudGrid>
    </ChildContent>
</MudDynamicTabs>


@code {

    private class TabView
    {
        public string Orientation { get; set; }
        public string Name { get; set; }
        public List<Objects> Obstacles = new();
        public List<Objects> Panels = new();
        public Guid Id { get; set; }
        public bool CanvasLocked { get; set; }
        public string Width { get; set; } = "1200";
        public string Height { get; set; } = "500";
    }

    [Parameter]
    public RenderFragment RenderFragment { get; set; }

    private MudDynamicTabs DynamicTabs;
    private int _index;
    static double _x = 290;
    static double _y = 250;
    int _width = 40;
    int _height = 40;
    private List<TabView> _tabs = new();
    private List<Napelem> _solarPanels = new();

    protected override async Task OnInitializedAsync()
    {
        _solarPanels = await NapelemController.GetAllNapelem();
        AddTabCallback();
    }

    private async void AddTab(Guid id)
    {
        var tabParameters = new DialogParameters
        {
            { "Content", "Add Tab" },
            { "name", "" },
            { "orientation", "" }
        };

        try
        {
            var result = await DialogService.ShowAsync<TabDialog>("Add Tab", tabParameters);
            var dialogResult = await result.Result;
            var name = dialogResult.Data.As<Tuple<string, string>>().Item1;
            var orientation = dialogResult.Data.As<Tuple<string, string>>().Item2;
            _tabs.Add(new TabView { Name = name, Orientation = orientation, Id = Guid.NewGuid() });
        }
        catch (Exception e)
        {
    //ignored
        }
        StateHasChanged();
        _index = _tabs.Count - 1;
    }

    private async void RemoveTab(Guid id)
    {
        var tabView = _tabs.SingleOrDefault((t) => Equals(t.Id, id));
        if (tabView.Obstacles.Count > 0 || tabView.Panels.Count > 0)
        {
            DialogParameters parameters = new() { { "Content", "Wall is not empty! Are you sure you want to do that?" } };
            var result = await DialogService.ShowAsync<ConfirmDialog>("Warning!", parameters);
            var res = await result.Result;
            if (res.Canceled) return;
        }
        _tabs.Remove(tabView);
        StateHasChanged();
    }

    void AddTabCallback() => AddTab(Guid.NewGuid());
    void CloseTabCallback(MudTabPanel panel) => RemoveTab((Guid)panel.Tag);

    private async void AddObstacle()
    {
        var parameters = new DialogParameters
        {
            { "Content", "Add Obstacle" },
            { "height", 100 },
            { "width", 100 }
        };
        try
        {
            var result = await DialogService.ShowAsync<ObstacleDialog>("Add Obstacle", parameters);
            var dialogResult = await result.Result;
            _width = dialogResult.Data.As<Tuple<int, int>>().Item1;
            _height = dialogResult.Data.As<Tuple<int, int>>().Item2;
            _tabs[_index].Obstacles.Add(new Objects(_x, _y, _width, _height));
        }
        catch (Exception e)
        {
    //ignored   
        }
        StateHasChanged();
    }

    private void DeleteObject(object? obj, MouseEventArgs e)
    {
        foreach (var o in _tabs[_index].Obstacles.Where(o => !o.isLocked).Where(o => o.X + o.Width / 2 < e.OffsetX + o.Width / 2 && o.X + o.Width / 2 > e.OffsetX - o.Width / 2 && o.Y + o.Height / 2 < e.OffsetY + o.Height / 2 && o.Y + o.Height / 2 > e.OffsetY - o.Height / 2))
        {
            _tabs[_index].Obstacles.Remove(o);
            return;
        }

        foreach (var p in _tabs[_index].Panels.Where(p => p.X + p.Width / 2 < e.OffsetX + p.Width / 2 && p.X + p.Width / 2 > e.OffsetX - p.Width / 2 && p.Y + p.Height / 2 < e.OffsetY + p.Height / 2 && p.Y + p.Height / 2 > e.OffsetY - p.Height / 2))
        {
            _tabs[_index].Panels.Remove(p);
            return;
        }
    }

    private void LockCanvas()
    {
        foreach (var obstacle in _tabs[_index].Obstacles)
        {
            obstacle.isLocked = true;
        }
        _tabs[_index].CanvasLocked = true;
    }

    private void AddPanel(int width, int height)
    {
        if (!_tabs[_index].CanvasLocked)
        {
            Snackbar.Add("Wall customization still in progress!", Severity.Error);
            return;
        }
        _tabs[_index].Panels.Add(new Objects(_x, _y, width, height));
    }

}