@using NapelemEditor.Interfaces
@inject IMouseService MouseSrv;

<g transform="translate(@_x, @_y)" cursor=@_cursor @onmousedown=OnDown
   @onmousedown:stopPropagation="true">
    @ChildContent
</g>

@code {

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    double? _x;

    [Parameter]
    public double X
    {
        get => _x ?? 0;
        set
        {
            if (!_x.HasValue || (!IsDown & XChanged.HasDelegate))
            {
                _x = value;
            }
        }
    }

    [Parameter]
    public EventCallback<double> XChanged { get; set; }

    double? _y;

    [Parameter]
    public double Y
    {
        get => _y ?? 0;
        set
        {
            if (!_y.HasValue || (!IsDown & YChanged.HasDelegate))
            {
                _y = value;
            }
        }
    }

    [Parameter]
    public EventCallback<double> YChanged { get; set; }

    [Parameter]
    public int Height { get; set; }

    [Parameter]
    public int Width { get; set; }

    [Parameter]
    public bool IsLocked { get; set; }

    protected override void OnInitialized()
    {
        MouseSrv.OnMove += OnMove;
        MouseSrv.OnUp += OnUpLeave;
        MouseSrv.OnLeave += OnUpLeave;
        base.OnInitialized();
    }


    string _cursor = "grab";
    bool _isDown;

    bool IsDown
    {
        get => _isDown;
        set
        {
            _isDown = value;
            _cursor = _isDown ? "grabbing" : "grab";
        }
    }

    double _cursorX;
    double _cursorY;

    void OnDown(MouseEventArgs e)
    {
        if (IsLocked)
        {
            Dispose();
            return;
        }
        IsDown = true;
        _cursorX = e.ClientX;
        _cursorY = e.ClientY;
    }

    void OnUpLeave(object? _, MouseEventArgs e)
    {
        IsDown = false;
    }


    void OnMove(object? _, MouseEventArgs e)
    {
        if (!IsDown)
            return;

        _x -= _cursorX - e.ClientX;
        _y -= _cursorY - e.ClientY;

        _cursorX = e.ClientX;
        _cursorY = e.ClientY;

        XChanged.InvokeAsync(_x.Value);
        YChanged.InvokeAsync(_y.Value);
    }


    void Dispose()
    {
        MouseSrv.OnMove -= OnMove;
        MouseSrv.OnUp -= OnUpLeave;
        MouseSrv.OnLeave -= OnUpLeave;
    }

}