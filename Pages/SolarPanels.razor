@page "/solarpanels"
@using NapelemEditor.Models
@inject INapelem NapelemController
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>Solar Panels</PageTitle>

<h1>Solar Panels</h1>
<MudTable T="Napelem" Items="napelems"
          CanCancelEdit="true"
          Hover="true"
          @bind-SelectedItem="selectedItem"
          IsEditRowSwitchingBlocked="false"
          CommitEditTooltip="Commit Edit"
          CancelEditTooltip="Cancel Edit"
          RowEditCommit="CommitEdit"
          RowEditCancel="ResetItemToOriginalValues"
          RowEditPreview="Backup"
          Filter="new Func<Napelem, bool>(FilterFunc1)">
    
    <ToolBarContent>
        <MudItem xs="6">
            <MudTextField @bind-Value="_searchString1" Immediate="true" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Style="justify-content: end" MaxLength="45" Clearable/>
        </MudItem>
        <MudSpacer/>        
        <MudButton OnClick="OpenNewSolarPanelDialog" Variant="Variant.Filled" Color="Color.Info">Add new Panel</MudButton>
    </ToolBarContent>

    <HeaderContent>
        <MudTh class="header">
            <MudTableSortLabel SortBy="new Func<Napelem, object>(x => x.Name)">Name</MudTableSortLabel>
        </MudTh>
        <MudTh class="header">
            <MudTableSortLabel SortBy="new Func<Napelem, object>(x => x.Type)">Type</MudTableSortLabel>
        </MudTh>
        <MudTh class="header">
            <MudTableSortLabel SortBy="new Func<Napelem, object>(x => x.Width)">Width</MudTableSortLabel>
        </MudTh>
        <MudTh class="header">
            <MudTableSortLabel SortBy="new Func<Napelem, object>(x => x.Height)">Height</MudTableSortLabel>
        </MudTh>
        <MudTh class="header">
            <MudTableSortLabel SortBy="new Func<Napelem, object>(x => x.Output)">Output</MudTableSortLabel>
        </MudTh>
        <MudTh class="header">
            <MudTableSortLabel SortBy="new Func<Napelem, object>(x => x.Price)">Price</MudTableSortLabel>
        </MudTh>
        <MudTh class="header">
        </MudTh>
    </HeaderContent>

    <RowTemplate Context="context">
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Type">@context.Type</MudTd>
        <MudTd DataLabel="Width">@context.Width</MudTd>
        <MudTd DataLabel="Height">@context.Height</MudTd>
        <MudTd DataLabel="Output">@context.Output</MudTd>
        <MudTd DataLabel="Price">@context.Price</MudTd>
        <MudTd>
            <MudTooltip Text="Delete Panel">
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => DeletePanel(context.id)"></MudIconButton>
            </MudTooltip>
        </MudTd>
    </RowTemplate>
    <RowEditingTemplate Context="context">
        <MudTd DataLabel="Name">
            <MudTextField @bind-Value="selectedItem.Name" MaxLength="50" Required Immediate/>
        </MudTd>
        <MudTd DataLabel="Type">
            <MudSelect @bind-Value="selectedItem.Type" Immediate>
                <MudSelectItem Value="@("Monocrystalline")"/>
                <MudSelectItem Value="@("Polycrystalline")"/>
                <MudSelectItem Value="@("Thin-Film")"/>
            </MudSelect>
        </MudTd>
        <MudTd DataLabel="Width">
            <MudNumericField @bind-Value="selectedItem.Width" Min="1" Max="999" MaxLength="3" Immediate/>
        </MudTd>
        <MudTd DataLabel="Height">
            <MudNumericField @bind-Value="selectedItem.Height" Min="1" Max="999" MaxLength="3" Immediate/>
        </MudTd>
        <MudTd DataLabel="Output">
            <MudNumericField @bind-Value="selectedItem.Output" Min="1" Max="999" MaxLength="3" Immediate/>
        </MudTd>
        <MudTd DataLabel="Price">
            <MudNumericField @bind-Value="selectedItem.Price" Min="1" Max="999999" MaxLength="6" Immediate/>
        </MudTd>
    </RowEditingTemplate>

    <PagerContent>
        <MudTablePager/>
    </PagerContent>
</MudTable>


@code {

    List<Napelem> napelems = new();
    private Napelem backup = new();
    private Napelem selectedItem;
    private string _searchString1;

    protected override async Task OnInitializedAsync()
    {
        napelems = await NapelemController.GetAllNapelem();
    }

    private async void OpenNewSolarPanelDialog()
    {
        try
        {
            var options = new DialogOptions { CloseOnEscapeKey = true };
            var result = await DialogService.ShowAsync<NewSolarPanelDialog>("New Solar Panel", options);
            var res = await result.Result;
            Console.WriteLine(res);
            if (!res.Data.Equals(true)) return;
            napelems = await NapelemController.GetAllNapelem();
            StateHasChanged();
        }
        catch (Exception e)
        {
            //ignored
        }
    }

    private async void DeletePanel(string ID)
    {
        try
        {
            DialogParameters parameters = new() { { "Content", "Are you sure you want to delete this panel?" } };
            var result = await DialogService.ShowAsync<ConfirmDialog>("Warning!", parameters);
            var res = await result.Result;
            if (!res.Data.Equals(true)) return;
            NapelemController.DeleteNapelem(ID);
            napelems = await NapelemController.GetAllNapelem();
            StateHasChanged();
            Snackbar.Add("Panel deleted!", Severity.Success);
        }
        catch (Exception e)
        {
    // ignored
        }
    }
    
    private async void CommitEdit(object napelem)
    {
        Console.WriteLine(((Napelem)napelem).Price);
        try
        {
            DialogParameters parameters = new() { { "Content", "Are you sure you want to save?" } };
            var result = DialogService.Show<ConfirmDialog>("Warning!", parameters);
            var res = await result.Result;
            Console.WriteLine(res.Cancelled);
            if (res.Cancelled)
            {
                ResetItemToOriginalValues(napelem);
                Snackbar.Add("Edit cancelled", Severity.Info);
                Console.WriteLine("reset");
            }
            else
            {
                NapelemController.UpdateNapelem((Napelem)napelem);
                Snackbar.Add("Successfully saved edit", Severity.Success);
            }
            napelems = await NapelemController.GetAllNapelem();
            StateHasChanged();
        }
        catch (Exception e)
        {
    //ignored
        }
    }

    private void ResetItemToOriginalValues(object napelem)
    {
        ((Napelem)napelem).Name = backup.Name;
        ((Napelem)napelem).Type = backup.Type;
        ((Napelem)napelem).Width = backup.Width;
        ((Napelem)napelem).Height = backup.Height;
        ((Napelem)napelem).Output = backup.Output;
        ((Napelem)napelem).Price = backup.Price;
    }

    private void Backup(object napelem)
    {
        backup = new Napelem
        {
            Name = ((Napelem)napelem).Name,
            Type = ((Napelem)napelem).Type,
            Width = ((Napelem)napelem).Width,
            Height = ((Napelem)napelem).Height,
            Output = ((Napelem)napelem).Output,
            Price = ((Napelem)napelem).Price
        };
    }
    
    private bool FilterFunc1(Napelem napelem) => FilterFunc(napelem, _searchString1);

    private bool FilterFunc(Napelem napelem, string searchString)
    {
        return string.IsNullOrWhiteSpace(searchString) || napelem.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase);
    }
}