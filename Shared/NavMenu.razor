@inject Blazored.LocalStorage.ILocalStorageService localStorageService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorageService

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">NapelemEditor</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="solarpanels">
                <span class="oi oi-list" aria-hidden="true"></span> Solar Panels
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="canvas">
                <span class="oi oi-brush" aria-hidden="true"></span> Canvas
            </NavLink>
        </div>
        @if (isAuthenticated)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="admins">
                    <span class="oi oi-people" aria-hidden="true"></span> Admins
                </NavLink>
            </div>
        }
    </nav>
</div>

@code {
    private bool isAuthenticated { get; set; }
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (await localStorageService.ContainKeyAsync("isAuthenticated"))
        {
            var temp = await localStorageService.GetItemAsync<bool>("isAuthenticated");
            if (temp != isAuthenticated)
            {
                isAuthenticated = temp;
                StateHasChanged();
            }
        }
        if (await sessionStorageService.ContainKeyAsync("isAuthenticated"))
        {
            var temp = await sessionStorageService.GetItemAsync<bool>("isAuthenticated");
            if (temp != isAuthenticated)
            {
                isAuthenticated = temp;
                StateHasChanged();
            }
        }
    }
}