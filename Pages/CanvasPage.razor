@inject IDialogService DialogService;
@inject INapelem NapelemController
@using MudBlazor.Extensions
@using NapelemEditor.Models
@inject ISnackbar Snackbar
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components.Rendering
@inject IJSRuntime Js

@page "/canvas"
<PageTitle>Canvas</PageTitle>

<MudDynamicTabs @ref="DynamicTabs" @bind-ActivePanelIndex="_index" Border="true" Outlined="true" AddTab="AddTabCallback" PanelClass="px-4 py-6" CloseTab="CloseTabCallback" AddIconToolTip="Click to add a new tab" CloseIconToolTip="Close tab">
    <ChildContent>
        @foreach (var tab in _tabs)
        {
            
            <MudTabPanel Text="@tab.Name" Tag="@tab.Id">
                <MudButton OnClick="addPanel">Add</MudButton>
                <div class="main" @ref="canvasRef" style="height: 800px; width: 1200px">
                     @foreach(var panel in tab.Panels)
                                    {
                                        <div class="draggable" style="width: @panel.Width; height: @panel.Height; position: absolute; top: @panel.Y; left: @panel.X">Draggable element rendered</div>
                                    }
                    <div class="draggable" style="width: 100px; height: 100px">Draggable element</div>
                </div>
            </MudTabPanel>
        }

    </ChildContent>
</MudDynamicTabs>


@code
{
    [Parameter]
    public RenderFragment RenderFragment { get; set; }

    ElementReference canvasRef;
    private MudDynamicTabs DynamicTabs;
    private int _index;
    private List<TabView> _tabs = new();
    private List<Napelem> _solarPanels = new();

    protected override async Task OnInitializedAsync()
    {
    // _solarPanels = await NapelemController.GetAllNapelem();
    // _tabs.Add(new TabView());
    // AddTabCallback();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await Js.InvokeVoidAsync("dragAndDrop", ".draggable");
    }

    private async void AddTab(Guid id)
    {
        try
        {
            var result = await DialogService.ShowAsync<TabDialog>("Add Tab");
            var res = await result.Result;
            if (res.Canceled) return;
            var tab = res.Data.As<TabView>();
            _tabs.Add(new TabView { Name = tab.Name, Orientation = tab.Orientation, Width = tab.Width, Height = tab.Height, Id = Guid.NewGuid() });
        }
        catch (Exception e)
        {
    //ignored
        }
        StateHasChanged();
        _index = _tabs.Count - 1;
    }

    private async void RemoveTab(Guid id)
    {
    // var tabView = _tabs.SingleOrDefault((t) => Equals(t.Id, id));
    // if (tabView.Obstacles.Count > 0 || tabView.Panels.Count > 0)
    // {
    //     DialogParameters parameters = new() { { "Content", "Wall is not empty! Are you sure you want to do that?" } };
    //     var result = await DialogService.ShowAsync<ConfirmDialog>("Warning!", parameters);
    //     var res = await result.Result;
    //     if (res.Canceled) return;
    // }
    // _tabs.Remove(tabView);
    // StateHasChanged();
    }

    void AddTabCallback() => AddTab(Guid.NewGuid());
    void CloseTabCallback(MudTabPanel panel) => RemoveTab((Guid)panel.Tag);

   //create builder to  render content in tab
    //add crrated div to tab.content

    private void addPanel()
    {
        var builder = new RenderTreeBuilder();

        builder.OpenElement(0, "div");
        builder.AddAttribute(1, "class", "main");
        builder.AddAttribute(2, "ref", canvasRef);
        builder.AddAttribute(3, "style", "height: 800px; width: 1200px");
        builder.OpenElement(4, "div");
        builder.AddAttribute(5, "class", "draggable");
        builder.AddAttribute(6, "style", "width: 100px; height: 100px");
        builder.AddContent(7, "Draggable element");
        builder.CloseElement();
        builder.CloseElement();
        _tabs[_index].Panels.Add(new Objects(10,10,100,100));
        DynamicTabs.ChildContent.Invoke(builder);
        
        StateHasChanged();
        ShouldRender();
        Console.WriteLine(builder.GetFrames().Count);
        Console.WriteLine();
    }
    //save tab content to TabView
    
}